@page "/building-cost"

<PageTitle>Check Building Costs</PageTitle>

@using NotAnotherBasePlanner.Data
@inject MaterialService MaterialService
@inject PriceService PriceService
@inject BuildingService BuildingService

<h1>Check Building Costs</h1>

<input type="text" @bind="buildingSearchString" placeholder="Building Ticker" />
<select id="market" @bind="market">
    <option value="NC1">NC Space</option>
</select>
<button type="submit" @onclick="Search">Search</button>

@if (buildingCosts != null)
{
    <table class="table">
    @foreach (string buildingTicker in buildingTickers)
        {
            <tr>
                <th>@buildingTicker</th>
                @foreach (Data.BuildingCost bc in buildingCosts)
                {
                    <td>@bc.MaterialTicker</td>
                }
                <th>Total</th>
            </tr>
            <tr>
        <td>Amount</td>
        @foreach (Data.BuildingCost bc in buildingCosts)
                {
                    <td>@bc.Amount</td>
                }
            </tr>
            <tr>
        <td>Price</td>
        @foreach (Data.BuildingCost bc in buildingCosts)
                {
                    <td>@(prices.Where(x => x.MaterialTicker == bc.MaterialTicker).Select(x => x.PriceAverage).First() ?? 0 *
            bc.Amount) NCC
                    </td>
                }
                <td>@cost NCC</td>
            </tr>
        }
    </table>
}

@code {
    private Building[] buildings;
    private Data.BuildingCost[] buildingCosts;
    private Price[] prices;

    private string? buildingSearchString;
    private string[] buildingTickers;
    private string? market;

    private double cost;

    protected override async Task OnInitializedAsync()
    {
        buildings = await BuildingService.GetBuildingsAsync();
        prices = await PriceService.GetPricesAsync();
    }

    private void Search()
    {
        cost = 0.0;
        buildingSearchString = buildingSearchString.Replace(" ", "");
        buildingTickers = buildingSearchString.Split(",");

        foreach (string buildingTicker in buildingTickers)
        {
            buildingCosts = BuildingService.GetBuildingCostsByTicker(buildingTicker);
            foreach (Data.BuildingCost buildingCost in buildingCosts)
            {
                double matPrice = prices.Where(p => p.MaterialTicker == buildingCost.MaterialTicker).Select(p => p.PriceAverage).First()
                ?? 0.0;

                cost += (matPrice * buildingCost.Amount);
            }
        }
    }

    // TODO: I'm going to need some way to associate buildings and building costs for display in the above table
}