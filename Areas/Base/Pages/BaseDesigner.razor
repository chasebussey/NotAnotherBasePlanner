@using NotAnotherBasePlanner.Data
@using NotAnotherBasePlanner.Pages
@using Microsoft.CodeAnalysis
@inject PlanetService PlanetService
@inject BuildingService BuildingService
@inject BaseService BaseService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationUserManager UserManager

<style>
    .card-group > .card {
        flex-basis: auto;
    }
</style>
<h3>Base: @PlanetFullDesignation</h3>

<div class="row">
    <div class="card col-sm-12 col-md-2">
        <div class="card-body">
            <h5 class="card-title">Planet Info</h5>
            <hr/>
            <h6 class="card-subtitle">Characteristics</h6>
            <span style="display: inline-block; min-width: 6.25em">Surface:</span> @PlanetSurface <br/>
            <span style="display: inline-block; min-width: 6.25em">Gravity:</span> @PlanetGravity <br/>
            <span style="display: inline-block; min-width: 6.25em">Temperature:</span> @PlanetTemperature <br/>
            <span style="display: inline-block; min-width: 6.25em">Pressure:</span > @PlanetPressure
            <hr/>
            <h6 class="card-subtitle">Resources</h6>
            @foreach (Resource res in planet.Resources)
            {
                <text><span style="display: inline-block; min-width: 2em">@res.MaterialTicker</span> | <span style="display: inline-block; min-width: 5em">@res.Type</span> | @res.Concentration.ToString("F2")%<br/></text>
            }
        </div>
    </div>
    <div class="card col-sm-12 col-md-6 gx-0">
        <div class="card-body">
            <h5 class="card-title">Buildings</h5>
            <hr/>
            <div class="card-group">
                @foreach (BaseBuilding building in basePlan.Buildings)
                {
                    <div class="card col-4 flex-shrink-0 flex-grow-0 border">
                        <div class="card-body"><h6 class="card-title">@building.BuildingTicker | @building.Building.Name</h6>
                            <hr/>
                            Constructed? <input class="form-check-input" type="checkbox" @bind="@building.Constructed"></input> <br/>
                            Efficiency: @building.Efficiency <br/>
                            Recipe(s): <br/>
                            <select class="form-select d-flex">
                                @foreach (Recipe recipe in building.Building.Recipes)
                                {
                                    @foreach (string mat in recipe.Outputs)
                                    {
                                        <option>@mat</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="card-footer">
                            <BuildingCostComponent BaseBuilding="@building" Planet="@planet"></BuildingCostComponent>
                            <button type="button" class="btn btn-outline-danger" @onclick="() => DeleteBuilding(building)">Delete</button>
                        </div>
                    </div>
                }
                @if (addBuilding)
                {
                    <div class="card col-4 flex-shrink-0 border p-2">
                        <form @onsubmit="() => AddBuilding(buildingTicker)">
                            <input type="text" class="form-text" @bind="buildingTicker"></input><br/>
                            <button type="submit">Add</button>
                            <button type="button" @onclick="HideAddBuildingForm">Cancel</button>
                        </form>
                    </div>
                }
                
            </div>
        </div>
        <div class="card-footer">
            <button class="btn btn-primary" @onclick="SaveBase">Save</button>
            <button class="btn btn-outline-primary" @onclick="DisplayAddBuildingForm">Add Building</button>
        </div>
    </div>
</div>


@code {

    [Parameter]
    public Planet planet { get; set; }
    [Parameter]
    public Data.Base basePlan { get; set; }
    [Parameter]
    public bool Create { get; set; }
    public string buildingTicker { get; set; }
    public bool addBuilding { get; set; }

    public string PlanetFullDesignation => !string.IsNullOrEmpty(planet.DisplayName) ? $"{planet.Designation} | {planet.DisplayName}" : planet.Designation;

    public string PlanetSurface => planet.Surface ? "ROCKY" : "GASEOUS";

    private string PlanetGravity => planet switch
    {
    { Gravity: < 0.25 } => "Low",
    { Gravity: > 2.5 } => "High",
        _ => "Normal"
        };

    private string PlanetTemperature => planet switch
    {
    {Temperature: < -25} => "Low",
    {Temperature: > 75} => "High",
        _ => "Normal"
        };

    private string PlanetPressure => planet switch
    {
    {Pressure: < 0.25} => "Low",
    {Pressure: > 2.0} => "High",
        _ => "Normal"
        };

    protected override void OnInitialized()
    {
        base.OnInitialized();
        planet = PlanetService.LoadPlanetResources(planet);
        if (basePlan is null)
        {
            basePlan = new Data.Base();
            basePlan.Buildings = new List<BaseBuilding>();
            AddBuilding("CM");
        }
        
    }

    public async void AddBuilding(string buildingTicker)
    {
        var building = await BuildingService.GetBuildingByTickerAsync(buildingTicker);
        var baseBuilding = new BaseBuilding
        {
            BuildingTicker = buildingTicker,
            Building = building,
            BaseId = basePlan.Id,
            Efficiency = 0.0,
            Constructed = false
        };

        basePlan.Buildings.Add(baseBuilding);
        HideAddBuildingForm();
    }

    public void DisplayAddBuildingForm()
    {
        addBuilding = true;
    }

    public void HideAddBuildingForm()
    {
        addBuilding = false;
        StateHasChanged();
    }

    public void MarkConstructed(BaseBuilding building)
    {
        building.Constructed = true;
    }

    public void SetShowCosts()
    {
    }

    public async void SaveBase()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity == null) return;
        var user = authState.User.Identity.Name;

        var userId = await UserManager.GetUserIdAsync(user);
        basePlan.ApplicationUserId = userId;
        basePlan.Planet = planet;
        if (Create)
        {
            BaseService.AddBaseAsync(basePlan);
        }
        else
        {
            BaseService.UpdateBaseAsync(basePlan);
        }
    }

    public void DeleteBuilding(BaseBuilding building)
    {
        basePlan.Buildings.Remove(building);
    }
}