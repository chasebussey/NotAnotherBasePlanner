@using NotAnotherBasePlanner.Data
@using NotAnotherBasePlanner.Pages
@inject PlanetService PlanetService
@inject BuildingService BuildingService
@inject BaseService BaseService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationUserManager UserManager
<h3>New Base: @PlanetFullDesignation</h3>
<div style="display: flex">
        <div class="" style="border: thin solid #2c3034;float: left">
            <h5>Planet Info:</h5>
            Surface: @PlanetSurface<br/>
            Gravity: @PlanetGravity<br/>
            Temperature: @PlanetTemperature<br/>
            Pressure: @PlanetPressure
            <hr/>
            @foreach (var res in planet.Resources)
            {
                <text>@res.MaterialTicker | @res.Type | @res.Concentration.ToString("F2")</text>
                <br/>
            }
        </div>

        <div class="" style="border: thin solid #2c3034;flex-grow: 4">
            <h5>Buildings:</h5>

            @if (basePlan.Buildings != null && basePlan.Buildings.Count > 0)
            {
                <table class="table">
                    <tr>
                        <th>Ticker</th>
                        <th>Recipe</th>
                        <th>Constructed?</th>
                        <th>Efficiency</th>
                    </tr>
                    @foreach (var building in basePlan.Buildings)
                    {
                        <tr>
                            <td>@building.BuildingTicker</td>
                            <td>@building.Recipe</td>
                            <td>@building.Constructed</td>
                            <td>@building.Efficiency</td>
                        </tr>
                        <BuildingCostComponent BaseBuilding="@building" planet="@planet"/>
                    }
                </table>
            }
            @if (!addBuilding)
            {
                <button class="btn btn-primary" type="button" @onclick="DisplayAddBuildingForm">Add Building</button>
                <button class="btn btn-outline-primary" @onclick="SaveBase">Save</button>
            }
            else
            {
                <form @onsubmit="() => AddBuilding(buildingTicker)">
                    <input type="text" @bind="buildingTicker"/>
                    <button>Add</button>
                </form>
            }
        </div>
        <div style="border: thin solid #2c3034;">
            <h5>Inputs:</h5>
        </div>
        <div style="border: thin solid #2c3034">
            <h5>Outputs:</h5>
        </div>
    </div>
@code {

    [Parameter]
    public Planet planet { get; set; }

    public Base basePlan { get; set; }
    public string buildingTicker { get; set; }
    public bool addBuilding { get; set; }

    public string PlanetFullDesignation => !string.IsNullOrEmpty(planet.DisplayName) ? $"{planet.Designation} | {planet.DisplayName}" : planet.Designation;

    public string PlanetSurface => planet.Surface ? "ROCKY" : "GASEOUS";

    private string PlanetGravity => planet switch
    {
    { Gravity: < 0.25 } => "Low",
    { Gravity: > 2.5 } => "High",
        _ => "Normal"
        };

    private string PlanetTemperature => planet switch
    {
    {Temperature: < -25} => "Low",
    {Temperature: > 75} => "High",
        _ => "Normal"
        };

    private string PlanetPressure => planet switch
    {
    {Pressure: < 0.25} => "Low",
    {Pressure: > 2.0} => "High",
        _ => "Normal"
        };

    protected override void OnInitialized()
    {
        base.OnInitialized();
        planet = PlanetService.LoadPlanetResources(planet);
        basePlan = new Base();
        basePlan.Buildings = new List<BaseBuilding>();
        AddBuilding("CM");
    }

    public async void AddBuilding(string buildingTicker)
    {
        var building = await BuildingService.GetBuildingByTickerAsync(buildingTicker);
        var baseBuilding = new BaseBuilding
        {
            BuildingTicker = buildingTicker,
            Building = building,
            BaseId = basePlan.Id,
            Efficiency = 0.0,
            Constructed = false
        };

        basePlan.Buildings.Add(baseBuilding);
        HideAddBuildingForm();
    }

    public void DisplayAddBuildingForm()
    {
        addBuilding = true;
    }

    public void HideAddBuildingForm()
    {
        addBuilding = false;
        StateHasChanged();
    }

    public void MarkConstructed(BaseBuilding building)
    {
        building.Constructed = true;
    }

    public void SetShowCosts()
    {
    }

    public async void SaveBase()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity == null) return;
        var user = authState.User.Identity.Name;

        var userId = await UserManager.GetUserIdAsync(user);
        basePlan.ApplicationUserId = userId;
        basePlan.Planet = planet;
        BaseService.AddBaseAsync(basePlan);
    }
}